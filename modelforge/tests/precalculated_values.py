import torch


def setup_single_methane_input():
    import torch

    # ------------------------------------ #
    # set up the input for the spk Painn model
    methan_spk = {
        "_idx": torch.tensor([0]),
        "dipole_moment": torch.tensor([0.0], dtype=torch.float64),
        "energy_U0": torch.tensor([-40.4789], dtype=torch.float64),
        "energy_U": torch.tensor([-40.4761], dtype=torch.float64),
        "_n_atoms": torch.tensor([5]),
        "_atomic_numbers": torch.tensor([6, 1, 1, 1, 1]),
        "_positions": torch.tensor(
            [
                [-1.2698e-02, 1.0858e00, 8.0010e-03],
                [2.1504e-03, -6.0313e-03, 1.9761e-03],
                [1.0117e00, 1.4638e00, 2.7657e-04],
                [-5.4082e-01, 1.4475e00, -8.7664e-01],
                [-5.2381e-01, 1.4379e00, 9.0640e-01],
            ],
            dtype=torch.float64,
        ),
        "_cell": torch.tensor(
            [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], dtype=torch.float64
        ),
        "_pbc": torch.tensor([False, False, False]),
        "_offsets": torch.tensor(
            [
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
            ],
            dtype=torch.float64,
        ),
        "_idx_i": torch.tensor(
            [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
        ),
        "_idx_j": torch.tensor(
            [1, 2, 3, 4, 0, 2, 3, 4, 0, 1, 3, 4, 0, 1, 2, 4, 0, 1, 2, 3]
        ),
        "_Rij": torch.tensor(
            [
                [1.4849e-02, -1.0918e00, -6.0249e-03],
                [1.0244e00, 3.7795e-01, -7.7244e-03],
                [-5.2812e-01, 3.6172e-01, -8.8464e-01],
                [-5.1112e-01, 3.5213e-01, 8.9840e-01],
                [-1.4849e-02, 1.0918e00, 6.0249e-03],
                [1.0096e00, 1.4698e00, -1.6995e-03],
                [-5.4297e-01, 1.4536e00, -8.7862e-01],
                [-5.2596e-01, 1.4440e00, 9.0442e-01],
                [-1.0244e00, -3.7795e-01, 7.7244e-03],
                [-1.0096e00, -1.4698e00, 1.6995e-03],
                [-1.5525e00, -1.6225e-02, -8.7692e-01],
                [-1.5355e00, -2.5819e-02, 9.0612e-01],
                [5.2812e-01, -3.6172e-01, 8.8464e-01],
                [5.4297e-01, -1.4536e00, 8.7862e-01],
                [1.5525e00, 1.6225e-02, 8.7692e-01],
                [1.7001e-02, -9.5940e-03, 1.7830e00],
                [5.1112e-01, -3.5213e-01, -8.9840e-01],
                [5.2596e-01, -1.4440e00, -9.0442e-01],
                [1.5355e00, 2.5819e-02, -9.0612e-01],
                [-1.7001e-02, 9.5940e-03, -1.7830e00],
            ],
            dtype=torch.float64,
        ),
    }
    # ------------------------------------ #

    # ------------------------------------ #
    # set up the input for the modelforge Painn model
    atomic_numbers = torch.tensor([6, 1, 1, 1, 1], dtype=torch.int64)

    positions = (
        torch.tensor(
            [
                [-1.2698e-02, 1.0858e00, 8.0010e-03],
                [2.1504e-03, -6.0313e-03, 1.9761e-03],
                [1.0117e00, 1.4638e00, 2.7657e-04],
                [-5.4082e-01, 1.4475e00, -8.7664e-01],
                [-5.2381e-01, 1.4379e00, 9.0640e-01],
            ],
            dtype=torch.float64,
            requires_grad=True,
        )
        / 10
    )
    E = torch.tensor([0.0], requires_grad=True)
    atomic_subsystem_indices = torch.tensor([0, 0, 0, 0, 0], dtype=torch.int32)
    from modelforge.dataset.dataset import ModelInput

    modelforge_methane = ModelInput(
        atomic_numbers=atomic_numbers,
        positions=positions,
        atomic_subsystem_indices=atomic_subsystem_indices,
        total_charge=torch.tensor([0], dtype=torch.int32),
    )
    # ------------------------------------ #

    return {
        "spk_methane_input": methan_spk,
        "modelforge_methane_input": modelforge_methane,
    }


def load_precalculated_painn_results():
    results = {
        "_idx": torch.tensor([0]),
        "dipole_moment": torch.tensor([0.0]),
        "energy_U0": torch.tensor([-40.4789], dtype=torch.float64),
        "energy_U": torch.tensor([-40.4761], dtype=torch.float64),
        "_n_atoms": torch.tensor([5]),
        "_atomic_numbers": torch.tensor([6, 1, 1, 1, 1]),
        "_positions": torch.tensor(
            [
                [-1.2698e-02, 1.0858e00, 8.0010e-03],
                [2.1504e-03, -6.0313e-03, 1.9761e-03],
                [1.0117e00, 1.4638e00, 2.7657e-04],
                [-5.4082e-01, 1.4475e00, -8.7664e-01],
                [-5.2381e-01, 1.4379e00, 9.0640e-01],
            ],
            dtype=torch.float64,
        ),
        "_cell": torch.tensor(
            [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], dtype=torch.float64
        ),
        "_pbc": torch.tensor([False, False, False]),
        "_offsets": torch.tensor(
            [
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
            ],
            dtype=torch.float64,
        ),
        "_idx_i": torch.tensor(
            [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
        ),
        "_idx_j": torch.tensor(
            [1, 2, 3, 4, 0, 2, 3, 4, 0, 1, 3, 4, 0, 1, 2, 4, 0, 1, 2, 3]
        ),
        "_Rij": torch.tensor(
            [
                [1.4849e-02, -1.0918e00, -6.0249e-03],
                [1.0244e00, 3.7795e-01, -7.7244e-03],
                [-5.2812e-01, 3.6172e-01, -8.8464e-01],
                [-5.1112e-01, 3.5213e-01, 8.9840e-01],
                [-1.4849e-02, 1.0918e00, 6.0249e-03],
                [1.0096e00, 1.4698e00, -1.6995e-03],
                [-5.4297e-01, 1.4536e00, -8.7862e-01],
                [-5.2596e-01, 1.4440e00, 9.0442e-01],
                [-1.0244e00, -3.7795e-01, 7.7244e-03],
                [-1.0096e00, -1.4698e00, 1.6995e-03],
                [-1.5525e00, -1.6225e-02, -8.7692e-01],
                [-1.5355e00, -2.5819e-02, 9.0612e-01],
                [5.2812e-01, -3.6172e-01, 8.8464e-01],
                [5.4297e-01, -1.4536e00, 8.7862e-01],
                [1.5525e00, 1.6225e-02, 8.7692e-01],
                [1.7001e-02, -9.5940e-03, 1.7830e00],
                [5.1112e-01, -3.5213e-01, -8.9840e-01],
                [5.2596e-01, -1.4440e00, -9.0442e-01],
                [1.5355e00, 2.5819e-02, -9.0612e-01],
                [-1.7001e-02, 9.5940e-03, -1.7830e00],
            ],
            dtype=torch.float64,
        ),
        "scalar_representation": torch.tensor(
            [
                [0.1628, 0.9060, -1.7949, -2.2348, -1.5576, 0.0653, -1.8837, 0.0704],
                [-0.2524, 0.6174, -0.1448, 0.1231, -0.6103, -1.6204, -0.1701, -0.9315],
                [-0.2524, 0.6174, -0.1448, 0.1231, -0.6103, -1.6204, -0.1701, -0.9315],
                [-0.2524, 0.6174, -0.1448, 0.1231, -0.6103, -1.6204, -0.1701, -0.9315],
                [-0.2524, 0.6174, -0.1448, 0.1231, -0.6103, -1.6204, -0.1701, -0.9315],
            ],
            dtype=torch.float64,
        ),
        "vector_representation": torch.tensor(
            [
                [
                    [
                        3.1709e-06,
                        -1.8076e-07,
                        -5.1120e-06,
                        2.3066e-06,
                        -2.5445e-06,
                        5.7499e-07,
                        1.3830e-06,
                        2.2221e-06,
                    ],
                    [
                        -2.4997e-06,
                        2.2083e-07,
                        3.9980e-06,
                        -2.0408e-06,
                        1.1304e-06,
                        3.2887e-07,
                        -1.1924e-06,
                        -1.5206e-06,
                    ],
                    [
                        -2.4008e-07,
                        1.2919e-07,
                        -6.7643e-08,
                        -3.3288e-07,
                        -2.0324e-07,
                        2.8985e-07,
                        -1.9070e-07,
                        -2.2505e-07,
                    ],
                ],
                [
                    [
                        -5.5289e-04,
                        1.4046e-04,
                        4.2147e-03,
                        -2.3912e-03,
                        4.2472e-03,
                        -1.1341e-03,
                        -1.4090e-03,
                        -2.1828e-03,
                    ],
                    [
                        4.0891e-02,
                        -1.0310e-02,
                        -3.1037e-01,
                        1.7599e-01,
                        -3.1260e-01,
                        8.3624e-02,
                        1.0368e-01,
                        1.6052e-01,
                    ],
                    [
                        2.2560e-04,
                        -5.6923e-05,
                        -1.7126e-03,
                        9.7115e-04,
                        -1.7250e-03,
                        4.6145e-04,
                        5.7210e-04,
                        8.8581e-04,
                    ],
                ],
                [
                    [
                        -3.8371e-02,
                        9.6760e-03,
                        2.9121e-01,
                        -1.6513e-01,
                        2.9330e-01,
                        -7.8460e-02,
                        -9.7277e-02,
                        -1.5061e-01,
                    ],
                    [
                        -1.4156e-02,
                        3.5694e-03,
                        1.0744e-01,
                        -6.0925e-02,
                        1.0821e-01,
                        -2.8948e-02,
                        -3.5890e-02,
                        -5.5567e-02,
                    ],
                    [
                        2.8971e-04,
                        -7.3015e-05,
                        -2.1964e-03,
                        1.2454e-03,
                        -2.2120e-03,
                        5.9190e-04,
                        7.3367e-04,
                        1.1356e-03,
                    ],
                ],
                [
                    [
                        1.9780e-02,
                        -4.9889e-03,
                        -1.5013e-01,
                        8.5131e-02,
                        -1.5121e-01,
                        4.0447e-02,
                        5.0148e-02,
                        7.7643e-02,
                    ],
                    [
                        -1.3547e-02,
                        3.4161e-03,
                        1.0283e-01,
                        -5.8307e-02,
                        1.0356e-01,
                        -2.7704e-02,
                        -3.4346e-02,
                        -5.3180e-02,
                    ],
                    [
                        3.3135e-02,
                        -8.3570e-03,
                        -2.5148e-01,
                        1.4260e-01,
                        -2.5328e-01,
                        6.7753e-02,
                        8.4001e-02,
                        1.3006e-01,
                    ],
                ],
                [
                    [
                        1.9144e-02,
                        -4.8287e-03,
                        -1.4529e-01,
                        8.2391e-02,
                        -1.4634e-01,
                        3.9145e-02,
                        4.8532e-02,
                        7.5143e-02,
                    ],
                    [
                        -1.3187e-02,
                        3.3258e-03,
                        1.0010e-01,
                        -5.6760e-02,
                        1.0082e-01,
                        -2.6968e-02,
                        -3.3434e-02,
                        -5.1770e-02,
                    ],
                    [
                        -3.3650e-02,
                        8.4877e-03,
                        2.5538e-01,
                        -1.4482e-01,
                        2.5722e-01,
                        -6.8804e-02,
                        -8.5305e-02,
                        -1.3208e-01,
                    ],
                ],
            ],
            dtype=torch.float64,
        ),
    }

    return results


def load_precalculated_schnet_results():
    schnetpack_results = {
        "_idx": torch.tensor([0]),
        "dipole_moment": torch.tensor([0.0], dtype=torch.float64),
        "energy_U0": torch.tensor([-40.4789], dtype=torch.float64),
        "energy_U": torch.tensor([-40.4761], dtype=torch.float64),
        "_n_atoms": torch.tensor([5]),
        "_atomic_numbers": torch.tensor([6, 1, 1, 1, 1]),
        "_positions": torch.tensor(
            [
                [-1.2698e-02, 1.0858e00, 8.0010e-03],
                [2.1504e-03, -6.0313e-03, 1.9761e-03],
                [1.0117e00, 1.4638e00, 2.7657e-04],
                [-5.4082e-01, 1.4475e00, -8.7664e-01],
                [-5.2381e-01, 1.4379e00, 9.0640e-01],
            ],
            dtype=torch.float64,
        ),
        "_cell": torch.tensor(
            [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], dtype=torch.float64
        ),
        "_pbc": torch.tensor([False, False, False]),
        "_offsets": torch.tensor(
            [
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
            ],
            dtype=torch.float64,
        ),
        "_idx_i": torch.tensor(
            [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
        ),
        "_idx_j": torch.tensor(
            [1, 2, 3, 4, 0, 2, 3, 4, 0, 1, 3, 4, 0, 1, 2, 4, 0, 1, 2, 3]
        ),
        "_Rij": torch.tensor(
            [
                [1.4849e-02, -1.0918e00, -6.0249e-03],
                [1.0244e00, 3.7795e-01, -7.7244e-03],
                [-5.2812e-01, 3.6172e-01, -8.8464e-01],
                [-5.1112e-01, 3.5213e-01, 8.9840e-01],
                [-1.4849e-02, 1.0918e00, 6.0249e-03],
                [1.0096e00, 1.4698e00, -1.6995e-03],
                [-5.4297e-01, 1.4536e00, -8.7862e-01],
                [-5.2596e-01, 1.4440e00, 9.0442e-01],
                [-1.0244e00, -3.7795e-01, 7.7244e-03],
                [-1.0096e00, -1.4698e00, 1.6995e-03],
                [-1.5525e00, -1.6225e-02, -8.7692e-01],
                [-1.5355e00, -2.5819e-02, 9.0612e-01],
                [5.2812e-01, -3.6172e-01, 8.8464e-01],
                [5.4297e-01, -1.4536e00, 8.7862e-01],
                [1.5525e00, 1.6225e-02, 8.7692e-01],
                [1.7001e-02, -9.5940e-03, 1.7830e00],
                [5.1112e-01, -3.5213e-01, -8.9840e-01],
                [5.2596e-01, -1.4440e00, -9.0442e-01],
                [1.5355e00, 2.5819e-02, -9.0612e-01],
                [-1.7001e-02, 9.5940e-03, -1.7830e00],
            ],
            dtype=torch.float64,
        ),
        "scalar_representation": torch.tensor(
            [
                [
                    0.1254,
                    -0.9284,
                    -0.6935,
                    2.2096,
                    -0.0555,
                    -0.1595,
                    -1.1804,
                    0.6562,
                    -0.3001,
                    -0.4318,
                    1.0901,
                    -0.0626,
                ],
                [
                    -0.0200,
                    -1.9309,
                    0.5967,
                    -0.3637,
                    0.2486,
                    0.1331,
                    -0.7700,
                    -1.4115,
                    -0.1196,
                    0.5523,
                    0.0644,
                    -0.4112,
                ],
                [
                    -0.0200,
                    -1.9309,
                    0.5967,
                    -0.3637,
                    0.2486,
                    0.1331,
                    -0.7700,
                    -1.4115,
                    -0.1196,
                    0.5523,
                    0.0645,
                    -0.4112,
                ],
                [
                    -0.0200,
                    -1.9309,
                    0.5967,
                    -0.3637,
                    0.2486,
                    0.1331,
                    -0.7700,
                    -1.4115,
                    -0.1196,
                    0.5523,
                    0.0645,
                    -0.4112,
                ],
                [
                    -0.0200,
                    -1.9309,
                    0.5967,
                    -0.3637,
                    0.2486,
                    0.1331,
                    -0.7700,
                    -1.4115,
                    -0.1196,
                    0.5523,
                    0.0645,
                    -0.4112,
                ],
            ],
            dtype=torch.float64,
        ),
    }
    return schnetpack_results


def provide_reference_values_for_test_ani_test_compare_rsf():
    def calculate_reference():
        from torchani.aev import radial_terms

        # ANI constants
        radial_cutoff = 5.0  # radial_cutoff
        radial_start = 0.8
        radial_dist_divisions = 8
        EtaR = torch.tensor([19.7])  # radial eta
        ShfR = torch.linspace(radial_start, radial_cutoff, radial_dist_divisions + 1)[
            :-1
        ]
        # generate reference value
        r_ani = radial_terms(5, EtaR, ShfR, d_ij)  # torch.Size([5,8]) # NOTE: Angstrom

    # r_ani = calculate_reference()
    r_ani = torch.tensor(
        [
            [
                0.0000e00,
                2.9988e-43,
                6.8802e-26,
                3.0382e-13,
                2.5784e-05,
                4.2054e-02,
                1.3182e-03,
                7.9414e-10,
            ],
            [
                8.8859e-32,
                2.7530e-17,
                1.6391e-07,
                1.8757e-02,
                4.1250e-02,
                1.7435e-06,
                1.4162e-15,
                2.2109e-29,
            ],
            [
                1.8177e-17,
                1.4309e-07,
                2.1648e-02,
                6.2946e-02,
                3.5175e-06,
                3.7776e-15,
                7.7972e-29,
                0.0000e00,
            ],
            [
                0.0000e00,
                9.3933e-29,
                3.5579e-15,
                2.5900e-06,
                3.6235e-02,
                9.7429e-03,
                5.0346e-08,
                5.0000e-18,
            ],
            [
                0.0000e00,
                0.0000e00,
                0.0000e00,
                2.9091e-42,
                2.2756e-25,
                3.4204e-13,
                9.8803e-06,
                5.4852e-03,
            ],
        ]
    )  # NOTE: Angstrom
    return r_ani


def provide_reference_values_for_test_ani_test_compute_rsf_with_diagonal_batching():
    def calculate_reference():
        from torchani.aev import neighbor_pairs_nopbc
        from modelforge.potential.models import Pairlist
        from modelforge.tests.test_ani import setup_two_methanes

        # ------------ general setup -------------#
        ani_species, ani_coordinates, _, mf_input = setup_two_methanes()
        pairlist = Pairlist(only_unique_pairs=True)
        pairs = pairlist(
            mf_input.positions,
            mf_input.atomic_subsystem_indices,
        )
        d_ij = pairs.d_ij

        # ANI constants
        radial_cutoff = 5.1  # radial_cutoff
        radial_start = 0.8
        radial_dist_divisions = 16
        # --------------- ANI setup --------------- #
        EtaR = torch.tensor([19.7])  # radial eta
        ShfR = torch.linspace(radial_start, radial_cutoff, radial_dist_divisions + 1)[
            :-1
        ]

        ani_coordinates_ = ani_coordinates
        ani_coordinates = ani_coordinates_.flatten(0, 1)

        species = ani_species
        atom_index12 = neighbor_pairs_nopbc(
            species == -1, ani_coordinates_, radial_cutoff
        )
        selected_coordinates = ani_coordinates.index_select(
            0, atom_index12.view(-1)
        ).view(2, -1, 3)
        vec = selected_coordinates[0] - selected_coordinates[1]
        distances = vec.norm(2, -1)

        # ------------ ANI calculation ----------#
        from torchani.aev import radial_terms

        assert torch.allclose(distances, d_ij.squeeze(1) * 10)  # NOTE: unit mismatch
        radial_symmetry_feature_vector_ani = radial_terms(
            radial_cutoff, EtaR, ShfR, distances
        )
        return radial_symmetry_feature_vector_ani, distances

    # ani_radial_feature_vector, d_ij = calculate_reference()

    ani_radial_feature_vector = torch.tensor(
        [
            [
                1.1521e-01,
                1.9887e-01,
                1.9943e-02,
                1.1617e-04,
                3.9313e-08,
                7.7283e-13,
                8.8258e-19,
                5.8552e-26,
                2.2565e-34,
                5.0447e-44,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.0545e-02,
                2.1156e-01,
                8.5123e-02,
                1.9896e-03,
                2.7016e-06,
                2.1310e-10,
                9.7646e-16,
                2.5993e-22,
                4.0193e-30,
                3.6106e-39,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                6.4763e-02,
                2.2335e-01,
                4.4745e-02,
                5.2075e-04,
                3.5207e-07,
                1.3828e-11,
                3.1549e-17,
                4.1816e-24,
                3.2196e-32,
                1.4401e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                2.5582e-02,
                2.0475e-01,
                9.5196e-02,
                2.5712e-03,
                4.0342e-06,
                3.6771e-10,
                1.9470e-15,
                5.9890e-22,
                1.0702e-29,
                1.1109e-38,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                7.4029e-04,
                5.1734e-02,
                2.1002e-01,
                4.9529e-02,
                6.7855e-04,
                5.4004e-07,
                2.4968e-11,
                6.7058e-17,
                1.0462e-23,
                9.4828e-32,
                4.9930e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.8995e-08,
                1.0910e-04,
                1.7734e-02,
                1.6745e-01,
                9.1846e-02,
                2.9266e-03,
                5.4174e-06,
                5.8255e-10,
                3.6390e-15,
                1.3206e-21,
                2.7839e-29,
                3.4093e-38,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.0451e-08,
                4.3118e-05,
                1.0334e-02,
                1.4387e-01,
                1.1636e-01,
                5.4668e-03,
                1.4921e-05,
                2.3658e-09,
                2.1791e-14,
                1.1660e-20,
                3.6242e-28,
                6.5443e-37,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.6058e-11,
                3.7039e-07,
                4.9630e-04,
                3.8632e-02,
                1.7469e-01,
                4.5889e-02,
                7.0026e-04,
                6.2077e-07,
                3.1968e-11,
                9.5635e-17,
                1.6620e-23,
                1.6780e-31,
                9.8406e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.9921e-11,
                7.3449e-07,
                7.8504e-04,
                4.8743e-02,
                1.7581e-01,
                3.6839e-02,
                4.4841e-04,
                3.1708e-07,
                1.3025e-11,
                3.1081e-17,
                4.3086e-24,
                3.4697e-32,
                1.6231e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                2.3417e-11,
                4.9212e-07,
                6.0078e-04,
                4.2607e-02,
                1.7554e-01,
                4.2011e-02,
                5.8409e-04,
                4.7175e-07,
                2.2134e-11,
                6.0328e-17,
                9.5522e-24,
                8.7863e-32,
                4.6946e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.1521e-01,
                1.9887e-01,
                1.9943e-02,
                1.1617e-04,
                3.9313e-08,
                7.7283e-13,
                8.8258e-19,
                5.8552e-26,
                2.2565e-34,
                5.0447e-44,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.0545e-02,
                2.1156e-01,
                8.5123e-02,
                1.9896e-03,
                2.7016e-06,
                2.1310e-10,
                9.7646e-16,
                2.5993e-22,
                4.0193e-30,
                3.6106e-39,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                6.4763e-02,
                2.2335e-01,
                4.4745e-02,
                5.2075e-04,
                3.5207e-07,
                1.3828e-11,
                3.1549e-17,
                4.1816e-24,
                3.2196e-32,
                1.4401e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                2.5582e-02,
                2.0475e-01,
                9.5196e-02,
                2.5712e-03,
                4.0342e-06,
                3.6771e-10,
                1.9470e-15,
                5.9890e-22,
                1.0702e-29,
                1.1109e-38,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                7.4029e-04,
                5.1734e-02,
                2.1002e-01,
                4.9529e-02,
                6.7855e-04,
                5.4004e-07,
                2.4968e-11,
                6.7058e-17,
                1.0462e-23,
                9.4828e-32,
                4.9930e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.8995e-08,
                1.0910e-04,
                1.7734e-02,
                1.6745e-01,
                9.1846e-02,
                2.9266e-03,
                5.4174e-06,
                5.8255e-10,
                3.6390e-15,
                1.3206e-21,
                2.7839e-29,
                3.4093e-38,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.0451e-08,
                4.3118e-05,
                1.0334e-02,
                1.4387e-01,
                1.1636e-01,
                5.4668e-03,
                1.4921e-05,
                2.3658e-09,
                2.1791e-14,
                1.1660e-20,
                3.6242e-28,
                6.5443e-37,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.6058e-11,
                3.7039e-07,
                4.9630e-04,
                3.8632e-02,
                1.7469e-01,
                4.5889e-02,
                7.0026e-04,
                6.2077e-07,
                3.1968e-11,
                9.5635e-17,
                1.6620e-23,
                1.6780e-31,
                9.8406e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                3.9921e-11,
                7.3449e-07,
                7.8504e-04,
                4.8743e-02,
                1.7581e-01,
                3.6839e-02,
                4.4841e-04,
                3.1708e-07,
                1.3025e-11,
                3.1081e-17,
                4.3086e-24,
                3.4697e-32,
                1.6231e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                2.3417e-11,
                4.9212e-07,
                6.0078e-04,
                4.2607e-02,
                1.7554e-01,
                4.2011e-02,
                5.8409e-04,
                4.7175e-07,
                2.2134e-11,
                6.0328e-17,
                9.5522e-24,
                8.7863e-32,
                4.6946e-41,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
        ],
    )
    d_ij = torch.tensor(
        [
            0.9859,
            1.1171,
            1.0513,
            1.1308,
            1.3354,
            1.6839,
            1.7206,
            1.8831,
            1.8618,
            1.8743,
            0.9859,
            1.1171,
            1.0513,
            1.1308,
            1.3354,
            1.6839,
            1.7206,
            1.8831,
            1.8618,
            1.8743,
        ]
    )
    return (ani_radial_feature_vector, d_ij)


def provide_input_for_test_test_compare_angular_symmetry_features():
    def calculate_values():
        from torchani.aev import angular_terms
        import math

        # ANI constants
        # for angular features
        angular_cutoff = Rca = 3.5  # angular_cutoff
        angular_start = 0.8
        EtaA = angular_eta = 12.5
        angular_dist_divisions = 8
        ShfA = torch.linspace(
            angular_start, angular_cutoff, angular_dist_divisions + 1
        )[:-1]
        angle_sections = 4

        angle_start = math.pi / (2 * angle_sections)
        ShfZ = (torch.linspace(0, math.pi, angle_sections + 1) + angle_start)[:-1]
        # set up relevant system properties
        from modelforge.tests.test_ani import setup_methane
        from modelforge.potential.models import Pairlist
        from modelforge.potential.utils import triple_by_molecule

        device = torch.device("cpu")

        species, r, _, _ = setup_methane()
        pairlist = Pairlist(only_unique_pairs=True).to(device=device)
        pairs = pairlist(r[0], torch.tensor([0, 0, 0, 0, 0], device=device))
        d_ij = pairs.d_ij.squeeze(1)
        atom_index12 = pairs.pair_indices
        species = species.flatten()
        species12 = species[atom_index12]
        r_ij = pairs.r_ij.squeeze(1)

        # other constants
        Zeta = 14.1
        # get index in right order
        even_closer_indices = (d_ij <= Rca).nonzero().flatten()
        atom_index12 = atom_index12.index_select(1, even_closer_indices)
        species12 = species12.index_select(1, even_closer_indices)
        r_ij = r_ij.index_select(0, even_closer_indices)
        central_atom_index, pair_index12, sign12 = triple_by_molecule(atom_index12)
        species12_small = species12[:, pair_index12]
        vec12 = r_ij.index_select(0, pair_index12.view(-1)).view(
            2, -1, 3
        ) * sign12.unsqueeze(-1)
        species12_ = torch.where(sign12 == 1, species12_small[1], species12_small[0])

        # First with ANI
        angular_feature_vector_ani = angular_terms(
            Rca, ShfZ.unsqueeze(0).unsqueeze(0), EtaA, Zeta, ShfA.unsqueeze(1), vec12
        )
        return angular_feature_vector_ani

    # angular_feature_vector_ani = calculate_values()
    angular_feature_vector_ani = torch.tensor(
        [
            [
                4.8522e-06,
                2.3708e-02,
                4.2573e-01,
                8.6617e-02,
                1.2854e-05,
                6.2808e-02,
                1.1278e00,
                2.2947e-01,
                1.9744e-06,
                9.6474e-03,
                1.7324e-01,
                3.5246e-02,
                1.7584e-08,
                8.5918e-05,
                1.5428e-03,
                3.1389e-04,
                9.0796e-12,
                4.4365e-08,
                7.9664e-07,
                1.6208e-07,
                2.7183e-16,
                1.3282e-12,
                2.3850e-11,
                4.8525e-12,
                4.7185e-22,
                2.3055e-18,
                4.1400e-17,
                8.4231e-18,
                4.7489e-29,
                2.3204e-25,
                4.1667e-24,
                8.4774e-25,
            ],
            [
                2.7950e-05,
                4.0643e-02,
                3.1523e-01,
                2.8083e-02,
                1.0355e-04,
                1.5058e-01,
                1.1679e00,
                1.0405e-01,
                2.2245e-05,
                3.2348e-02,
                2.5089e-01,
                2.2351e-02,
                2.7706e-07,
                4.0289e-04,
                3.1248e-03,
                2.7838e-04,
                2.0008e-10,
                2.9095e-07,
                2.2566e-06,
                2.0103e-07,
                8.3774e-15,
                1.2182e-11,
                9.4483e-11,
                8.4172e-12,
                2.0337e-20,
                2.9573e-17,
                2.2937e-16,
                2.0434e-17,
                2.8626e-27,
                4.1626e-24,
                3.2285e-23,
                2.8762e-24,
            ],
            [
                7.9353e-06,
                2.8344e-02,
                4.1207e-01,
                6.8420e-02,
                2.2269e-05,
                7.9542e-02,
                1.1564e00,
                1.9201e-01,
                3.6233e-06,
                1.2942e-02,
                1.8815e-01,
                3.1241e-02,
                3.4182e-08,
                1.2209e-04,
                1.7750e-03,
                2.9472e-04,
                1.8696e-11,
                6.6782e-08,
                9.7087e-07,
                1.6121e-07,
                5.9293e-16,
                2.1179e-12,
                3.0790e-11,
                5.1124e-12,
                1.0903e-21,
                3.8943e-18,
                5.6615e-17,
                9.4005e-18,
                1.1623e-28,
                4.1518e-25,
                6.0358e-24,
                1.0022e-24,
            ],
            [
                1.5629e-02,
                4.9222e-01,
                1.6952e-01,
                4.3343e-04,
                3.1427e-02,
                9.8975e-01,
                3.4086e-01,
                8.7153e-04,
                3.6639e-03,
                1.1539e-01,
                3.9739e-02,
                1.0161e-04,
                2.4767e-05,
                7.7999e-04,
                2.6862e-04,
                6.8682e-07,
                9.7066e-09,
                3.0569e-07,
                1.0528e-07,
                2.6918e-10,
                2.2057e-13,
                6.9465e-12,
                2.3923e-12,
                6.1168e-15,
                2.9061e-19,
                9.1521e-18,
                3.1519e-18,
                8.0590e-21,
                2.2200e-26,
                6.9914e-25,
                2.4078e-25,
                6.1563e-28,
            ],
            [
                6.8506e-05,
                9.4799e-02,
                7.0949e-01,
                6.0960e-02,
                1.0434e-04,
                1.4438e-01,
                1.0806e00,
                9.2844e-02,
                9.2134e-06,
                1.2750e-02,
                9.5420e-02,
                8.1986e-03,
                4.7172e-08,
                6.5277e-05,
                4.8854e-04,
                4.1976e-05,
                1.4003e-11,
                1.9378e-08,
                1.4503e-07,
                1.2461e-08,
                2.4102e-16,
                3.3352e-13,
                2.4961e-12,
                2.1447e-13,
                2.4052e-22,
                3.3283e-19,
                2.4910e-18,
                2.1403e-19,
                1.3916e-29,
                1.9258e-26,
                1.4413e-25,
                1.2384e-26,
            ],
            [
                9.8001e-05,
                9.2907e-02,
                5.2780e-01,
                3.4178e-02,
                2.0874e-04,
                1.9789e-01,
                1.1242e00,
                7.2799e-02,
                2.5779e-05,
                2.4439e-02,
                1.3884e-01,
                8.9905e-03,
                1.8459e-07,
                1.7499e-04,
                9.9414e-04,
                6.4376e-05,
                7.6634e-11,
                7.2651e-08,
                4.1273e-07,
                2.6726e-08,
                1.8447e-15,
                1.7488e-12,
                9.9348e-12,
                6.4333e-13,
                2.5745e-21,
                2.4407e-18,
                1.3865e-17,
                8.9786e-19,
                2.0833e-28,
                1.9750e-25,
                1.1220e-24,
                7.2654e-26,
            ],
            [
                1.2117e-02,
                9.0376e-03,
                6.0453e-05,
                3.7197e-10,
                3.1071e-01,
                2.3175e-01,
                1.5502e-03,
                9.5384e-09,
                4.6196e-01,
                3.4456e-01,
                2.3048e-03,
                1.4182e-08,
                3.9822e-02,
                2.9703e-02,
                1.9868e-04,
                1.2225e-09,
                1.9904e-04,
                1.4846e-04,
                9.9303e-07,
                6.1102e-12,
                5.7679e-08,
                4.3021e-08,
                2.8777e-10,
                1.7707e-15,
                9.6912e-13,
                7.2284e-13,
                4.8351e-15,
                2.9751e-20,
                9.4410e-19,
                7.0419e-19,
                4.7103e-21,
                2.8983e-26,
            ],
            [
                1.7809e-02,
                1.0248e-02,
                4.9963e-05,
                1.7086e-10,
                3.9123e-01,
                2.2513e-01,
                1.0976e-03,
                3.7533e-09,
                4.9830e-01,
                2.8674e-01,
                1.3979e-03,
                4.7805e-09,
                3.6798e-02,
                2.1175e-02,
                1.0323e-04,
                3.5303e-10,
                1.5756e-04,
                9.0665e-05,
                4.4202e-07,
                1.5116e-12,
                3.9114e-08,
                2.2508e-08,
                1.0973e-10,
                3.7525e-16,
                5.6300e-13,
                3.2397e-13,
                1.5795e-15,
                5.4013e-21,
                4.6985e-19,
                2.7037e-19,
                1.3181e-21,
                4.5076e-27,
            ],
            [
                2.1048e-06,
                2.0700e-05,
                2.3409e-06,
                1.3398e-09,
                1.0257e-03,
                1.0087e-02,
                1.1407e-03,
                6.5290e-07,
                2.8979e-02,
                2.8499e-01,
                3.2229e-02,
                1.8447e-05,
                4.7471e-02,
                4.6686e-01,
                5.2796e-02,
                3.0218e-05,
                4.5088e-03,
                4.4342e-02,
                5.0145e-03,
                2.8701e-06,
                2.4829e-05,
                2.4419e-04,
                2.7615e-05,
                1.5805e-08,
                7.9278e-09,
                7.7966e-08,
                8.8170e-09,
                5.0465e-12,
                1.4676e-13,
                1.4434e-12,
                1.6323e-13,
                9.3424e-17,
            ],
            [
                5.9566e-02,
                1.9477e-01,
                7.0338e-03,
                7.4314e-07,
                3.0083e-01,
                9.8368e-01,
                3.5524e-02,
                3.7532e-06,
                8.8091e-02,
                2.8804e-01,
                1.0402e-02,
                1.0990e-06,
                1.4956e-03,
                4.8904e-03,
                1.7661e-04,
                1.8659e-08,
                1.4722e-06,
                4.8140e-06,
                1.7385e-07,
                1.8367e-11,
                8.4027e-11,
                2.7476e-10,
                9.9223e-12,
                1.0483e-15,
                2.7806e-16,
                9.0922e-16,
                3.2835e-17,
                3.4691e-21,
                5.3351e-23,
                1.7445e-22,
                6.3000e-24,
                6.6561e-28,
            ],
            [
                4.4798e-05,
                8.7832e-04,
                1.9430e-04,
                2.7859e-07,
                5.0188e-03,
                9.8400e-02,
                2.1768e-02,
                3.1211e-05,
                3.2600e-02,
                6.3917e-01,
                1.4139e-01,
                2.0273e-04,
                1.2278e-02,
                2.4072e-01,
                5.3251e-02,
                7.6352e-05,
                2.6810e-04,
                5.2564e-03,
                1.1628e-03,
                1.6672e-06,
                3.3943e-07,
                6.6550e-06,
                1.4722e-06,
                2.1108e-09,
                2.4916e-11,
                4.8851e-10,
                1.0807e-10,
                1.5495e-13,
                1.0605e-16,
                2.0792e-15,
                4.5995e-16,
                6.5948e-19,
            ],
            [
                4.8883e-05,
                1.2114e-03,
                3.3410e-04,
                6.4074e-07,
                4.6915e-03,
                1.1626e-01,
                3.2065e-02,
                6.1494e-05,
                2.6106e-02,
                6.4693e-01,
                1.7843e-01,
                3.4219e-04,
                8.4227e-03,
                2.0872e-01,
                5.7566e-02,
                1.1040e-04,
                1.5756e-04,
                3.9044e-03,
                1.0769e-03,
                2.0652e-06,
                1.7089e-07,
                4.2347e-06,
                1.1679e-06,
                2.2399e-09,
                1.0746e-11,
                2.6630e-10,
                7.3446e-11,
                1.4085e-13,
                3.9181e-17,
                9.7093e-16,
                2.6779e-16,
                5.1356e-19,
            ],
            [
                4.1992e-08,
                2.1801e-07,
                1.2856e-08,
                2.8659e-12,
                8.6032e-05,
                4.4666e-04,
                2.6339e-05,
                5.8715e-09,
                1.0220e-02,
                5.3057e-02,
                3.1288e-03,
                6.9747e-07,
                7.0385e-02,
                3.6542e-01,
                2.1549e-02,
                4.8037e-06,
                2.8107e-02,
                1.4592e-01,
                8.6050e-03,
                1.9182e-06,
                6.5076e-04,
                3.3786e-03,
                1.9923e-04,
                4.4413e-08,
                8.7359e-07,
                4.5355e-06,
                2.6745e-07,
                5.9621e-11,
                6.7994e-11,
                3.5301e-10,
                2.0817e-11,
                4.6405e-15,
            ],
            [
                1.2947e-03,
                4.2242e-04,
                1.0075e-06,
                8.4906e-13,
                1.1465e-01,
                3.7406e-02,
                8.9217e-05,
                7.5184e-11,
                5.8861e-01,
                1.9205e-01,
                4.5805e-04,
                3.8601e-10,
                1.7522e-01,
                5.7168e-02,
                1.3635e-04,
                1.1491e-10,
                3.0242e-03,
                9.8669e-04,
                2.3534e-06,
                1.9832e-12,
                3.0263e-06,
                9.8739e-07,
                2.3550e-09,
                1.9846e-15,
                1.7559e-10,
                5.7289e-11,
                1.3664e-13,
                1.1515e-19,
                5.9069e-16,
                1.9272e-16,
                4.5967e-19,
                3.8737e-25,
            ],
            [
                1.3883e-03,
                7.2107e-04,
                3.0969e-06,
                8.3239e-12,
                1.1235e-01,
                5.8352e-02,
                2.5061e-04,
                6.7360e-10,
                5.2714e-01,
                2.7378e-01,
                1.1758e-03,
                3.1605e-09,
                1.4340e-01,
                7.4480e-02,
                3.1988e-04,
                8.5978e-10,
                2.2619e-03,
                1.1748e-03,
                5.0453e-06,
                1.3561e-11,
                2.0685e-06,
                1.0743e-06,
                4.6140e-09,
                1.2402e-14,
                1.0968e-10,
                5.6964e-11,
                2.4465e-13,
                6.5758e-19,
                3.3719e-16,
                1.7513e-16,
                7.5213e-19,
                2.0216e-24,
            ],
            [
                3.0517e-05,
                1.6158e-04,
                9.7253e-06,
                2.2350e-09,
                6.7873e-03,
                3.5937e-02,
                2.1630e-03,
                4.9709e-07,
                8.7525e-02,
                4.6342e-01,
                2.7893e-02,
                6.4102e-06,
                6.5440e-02,
                3.4649e-01,
                2.0855e-02,
                4.7927e-06,
                2.8368e-03,
                1.5020e-02,
                9.0405e-04,
                2.0776e-07,
                7.1303e-06,
                3.7753e-05,
                2.2723e-06,
                5.2221e-10,
                1.0391e-09,
                5.5017e-09,
                3.3114e-10,
                7.6101e-14,
                8.7797e-15,
                4.6486e-14,
                2.7979e-15,
                6.4301e-19,
            ],
            [
                3.1734e-05,
                2.0893e-04,
                1.5751e-05,
                5.0425e-09,
                6.4501e-03,
                4.2466e-02,
                3.2014e-03,
                1.0249e-06,
                7.6012e-02,
                5.0045e-01,
                3.7727e-02,
                1.2078e-05,
                5.1937e-02,
                3.4195e-01,
                2.5778e-02,
                8.2527e-06,
                2.0576e-03,
                1.3547e-02,
                1.0212e-03,
                3.2694e-07,
                4.7261e-06,
                3.1116e-05,
                2.3457e-06,
                7.5097e-10,
                6.2941e-10,
                4.1439e-09,
                3.1240e-10,
                1.0001e-13,
                4.8601e-15,
                3.1998e-14,
                2.4122e-15,
                7.7226e-19,
            ],
            [
                5.0454e-02,
                7.4863e-02,
                1.1237e-03,
                2.8603e-08,
                4.4323e-01,
                6.5766e-01,
                9.8717e-03,
                2.5128e-07,
                2.2576e-01,
                3.3498e-01,
                5.0281e-03,
                1.2799e-07,
                6.6671e-03,
                9.8925e-03,
                1.4849e-04,
                3.7797e-09,
                1.1416e-05,
                1.6939e-05,
                2.5426e-07,
                6.4719e-12,
                1.1333e-09,
                1.6816e-09,
                2.5242e-11,
                6.4252e-16,
                6.5236e-15,
                9.6796e-15,
                1.4529e-16,
                3.6984e-21,
                2.1772e-21,
                3.2305e-21,
                4.8491e-23,
                1.2343e-27,
            ],
            [
                2.3614e-03,
                1.0143e-03,
                3.4346e-06,
                5.8275e-12,
                1.5261e-01,
                6.5551e-02,
                2.2197e-04,
                3.7662e-10,
                5.7187e-01,
                2.4563e-01,
                8.3177e-04,
                1.4113e-09,
                1.2424e-01,
                5.3365e-02,
                1.8071e-04,
                3.0661e-10,
                1.5651e-03,
                6.7223e-04,
                2.2764e-06,
                3.8623e-12,
                1.1431e-06,
                4.9097e-07,
                1.6626e-09,
                2.8209e-15,
                4.8404e-11,
                2.0791e-11,
                7.0403e-14,
                1.1945e-19,
                1.1884e-16,
                5.1046e-17,
                1.7286e-19,
                2.9329e-25,
            ],
            [
                6.6708e-07,
                2.7369e-06,
                1.2600e-07,
                1.9345e-11,
                6.2183e-04,
                2.5513e-03,
                1.1745e-04,
                1.8033e-08,
                3.3608e-02,
                1.3789e-01,
                6.3479e-03,
                9.7461e-07,
                1.0532e-01,
                4.3210e-01,
                1.9892e-02,
                3.0541e-06,
                1.9135e-02,
                7.8509e-02,
                3.6142e-03,
                5.5490e-07,
                2.0158e-04,
                8.2705e-04,
                3.8074e-05,
                5.8456e-09,
                1.2312e-07,
                5.0515e-07,
                2.3255e-08,
                3.5704e-12,
                4.3601e-12,
                1.7889e-11,
                8.2354e-13,
                1.2644e-16,
            ],
            [
                1.1873e-02,
                5.5240e-03,
                2.0683e-05,
                4.2683e-11,
                3.4362e-01,
                1.5988e-01,
                5.9860e-04,
                1.2354e-09,
                5.7663e-01,
                2.6828e-01,
                1.0045e-03,
                2.0730e-09,
                5.6102e-02,
                2.6102e-02,
                9.7731e-05,
                2.0169e-10,
                3.1648e-04,
                1.4725e-04,
                5.5132e-07,
                1.1378e-12,
                1.0351e-07,
                4.8161e-08,
                1.8032e-10,
                3.7214e-16,
                1.9630e-12,
                9.1331e-13,
                3.4196e-15,
                7.0571e-21,
                2.1584e-18,
                1.0042e-18,
                3.7599e-21,
                7.7594e-27,
            ],
            [
                3.6955e-08,
                1.8039e-07,
                9.9730e-09,
                2.0190e-12,
                7.9832e-05,
                3.8967e-04,
                2.1544e-05,
                4.3616e-09,
                9.9990e-03,
                4.8807e-02,
                2.6984e-03,
                5.4629e-07,
                7.2613e-02,
                3.5443e-01,
                1.9596e-02,
                3.9672e-06,
                3.0574e-02,
                1.4924e-01,
                8.2508e-03,
                1.6704e-06,
                7.4638e-04,
                3.6432e-03,
                2.0142e-04,
                4.0778e-08,
                1.0565e-06,
                5.1568e-06,
                2.8510e-07,
                5.7719e-11,
                8.6701e-11,
                4.2320e-10,
                2.3398e-11,
                4.7369e-15,
            ],
            [
                2.2473e-03,
                8.6362e-04,
                2.5401e-06,
                3.2630e-12,
                1.5073e-01,
                5.7924e-02,
                1.7037e-04,
                2.1885e-10,
                5.8615e-01,
                2.2525e-01,
                6.6251e-04,
                8.5106e-10,
                1.3216e-01,
                5.0788e-02,
                1.4938e-04,
                1.9189e-10,
                1.7277e-03,
                6.6394e-04,
                1.9528e-06,
                2.5085e-12,
                1.3096e-06,
                5.0324e-07,
                1.4801e-09,
                1.9014e-15,
                5.7551e-11,
                2.2116e-11,
                6.5048e-14,
                8.3559e-20,
                1.4664e-16,
                5.6353e-17,
                1.6574e-19,
                2.1291e-25,
            ],
            [
                1.4055e-06,
                1.6223e-06,
                1.8217e-08,
                2.8208e-13,
                1.3597e-03,
                1.5694e-03,
                1.7623e-05,
                2.7288e-10,
                7.6267e-02,
                8.8027e-02,
                9.8847e-04,
                1.5306e-08,
                2.4803e-01,
                2.8627e-01,
                3.2146e-03,
                4.9777e-08,
                4.6767e-02,
                5.3979e-02,
                6.0614e-04,
                9.3857e-09,
                5.1129e-04,
                5.9013e-04,
                6.6266e-06,
                1.0261e-10,
                3.2409e-07,
                3.7407e-07,
                4.2004e-09,
                6.5042e-14,
                1.1911e-11,
                1.3748e-11,
                1.5437e-13,
                2.3904e-18,
            ],
            [
                4.6708e-03,
                2.1521e-03,
                7.9598e-06,
                1.6042e-11,
                2.2069e-01,
                1.0168e-01,
                3.7609e-04,
                7.5796e-10,
                6.0459e-01,
                2.7856e-01,
                1.0303e-03,
                2.0764e-09,
                9.6030e-02,
                4.4246e-02,
                1.6365e-04,
                3.2981e-10,
                8.8437e-04,
                4.0747e-04,
                1.5071e-06,
                3.0374e-12,
                4.7222e-07,
                2.1757e-07,
                8.0474e-10,
                1.6218e-15,
                1.4619e-11,
                6.7359e-12,
                2.4914e-14,
                5.0210e-20,
                2.6242e-17,
                1.2091e-17,
                4.4720e-20,
                9.0127e-26,
            ],
            [
                1.2421e-03,
                6.1987e-04,
                2.5333e-06,
                6.1908e-12,
                1.0647e-01,
                5.3136e-02,
                2.1716e-04,
                5.3069e-10,
                5.2919e-01,
                2.6409e-01,
                1.0793e-03,
                2.6376e-09,
                1.5250e-01,
                7.6103e-02,
                3.1102e-04,
                7.6007e-10,
                2.5479e-03,
                1.2715e-03,
                5.1965e-06,
                1.2699e-11,
                2.4683e-06,
                1.2318e-06,
                5.0340e-09,
                1.2302e-14,
                1.3864e-10,
                6.9186e-11,
                2.8275e-13,
                6.9099e-19,
                4.5148e-16,
                2.2531e-16,
                9.2080e-19,
                2.2503e-24,
            ],
            [
                1.1502e-06,
                1.3306e-06,
                1.4981e-08,
                2.3305e-13,
                1.1870e-03,
                1.3732e-03,
                1.5461e-05,
                2.4051e-10,
                7.1027e-02,
                8.2166e-02,
                9.2510e-04,
                1.4391e-08,
                2.4641e-01,
                2.8506e-01,
                3.2094e-03,
                4.9925e-08,
                4.9565e-02,
                5.7338e-02,
                6.4556e-04,
                1.0042e-08,
                5.7806e-04,
                6.6871e-04,
                7.5289e-06,
                1.1712e-10,
                3.9088e-07,
                4.5218e-07,
                5.0910e-09,
                7.9195e-14,
                1.5325e-11,
                1.7728e-11,
                1.9960e-13,
                3.1049e-18,
            ],
            [
                1.2223e-03,
                4.2695e-04,
                1.1116e-06,
                1.1187e-12,
                1.1048e-01,
                3.8590e-02,
                1.0047e-04,
                1.0112e-10,
                5.7897e-01,
                2.0223e-01,
                5.2654e-04,
                5.2990e-10,
                1.7592e-01,
                6.1447e-02,
                1.5999e-04,
                1.6101e-10,
                3.0991e-03,
                1.0825e-03,
                2.8185e-06,
                2.8365e-12,
                3.1656e-06,
                1.1057e-06,
                2.8789e-09,
                2.8973e-15,
                1.8747e-10,
                6.5484e-11,
                1.7050e-13,
                1.7158e-19,
                6.4374e-16,
                2.2486e-16,
                5.8544e-19,
                5.8918e-25,
            ],
            [
                4.7224e-07,
                1.6298e-06,
                6.2375e-08,
                7.2119e-12,
                5.1387e-04,
                1.7734e-03,
                6.7873e-05,
                7.8475e-09,
                3.2420e-02,
                1.1188e-01,
                4.2821e-03,
                4.9510e-07,
                1.1859e-01,
                4.0927e-01,
                1.5664e-02,
                1.8111e-06,
                2.5152e-02,
                8.6803e-02,
                3.3222e-03,
                3.8411e-07,
                3.0930e-04,
                1.0674e-03,
                4.0853e-05,
                4.7234e-09,
                2.2052e-07,
                7.6104e-07,
                2.9127e-08,
                3.3677e-12,
                9.1161e-12,
                3.1461e-11,
                1.2041e-12,
                1.3922e-16,
            ],
            [
                4.5843e-08,
                2.4872e-07,
                1.5355e-08,
                3.6645e-12,
                9.0501e-05,
                4.9101e-04,
                3.0313e-05,
                7.2342e-09,
                1.0359e-02,
                5.6202e-02,
                3.4697e-03,
                8.2804e-07,
                6.8747e-02,
                3.7299e-01,
                2.3027e-02,
                5.4953e-06,
                2.6453e-02,
                1.4352e-01,
                8.8604e-03,
                2.1145e-06,
                5.9016e-04,
                3.2019e-03,
                1.9767e-04,
                4.7174e-08,
                7.6338e-07,
                4.1417e-06,
                2.5569e-07,
                6.1021e-11,
                5.7253e-11,
                3.1063e-10,
                1.9177e-11,
                4.5765e-15,
            ],
        ]
    )
    return angular_feature_vector_ani


def provide_input_for_test_ani_test_compare_aev():
    def calculate_reference():
        from modelforge.tests.test_ani import setup_methane
        import torchani

        species, coordinates, device, mf_input = setup_methane()

        torchani_model = torchani.models.ANI2x(periodic_table_index=False)

        # calculate aev
        (species, tochani_aev) = torchani_model.aev_computer(
            (species, coordinates), cell=None, pbc=None
        )
        # NOTE: return only a subsection
        return tochani_aev.squeeze(0)[::2, :50:5]

    # torchani_aev = calculate_reference()
    torchani_aev = torch.tensor(
        [
            [
                2.3610e-01,
                5.9541e-10,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                7.4029e-04,
                8.2728e-02,
                2.0929e-23,
                0.0000e00,
                2.7016e-06,
                3.6106e-39,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                1.0515e-08,
                8.4317e-02,
                1.3861e-23,
                0.0000e00,
                4.0342e-06,
                1.1109e-38,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
        ],
    )
    return torchani_aev


def provide_reference_for_test_physnet_test_rbf():
    import numpy as np

    def calculate_reference():
        import numpy as np
        import tensorflow as tf

        K = 20
        cutoff_in_angstrom = 5

        # PhysNet implementation
        def softplus_inverse(x):
            return x + np.log(-np.expm1(-x))

        pn_widths = [
            softplus_inverse((0.5 / ((1.0 - np.exp(-cutoff_in_angstrom)) / K)) ** 2)
        ] * K
        pn_widths = tf.nn.softplus(
            tf.Variable(np.asarray(pn_widths), name="widths", dtype=tf.float32)
        )
        pn_widths_np = pn_widths.numpy()
        centers = softplus_inverse(np.linspace(1.0, np.exp(-cutoff_in_angstrom), K))

        _centers = tf.nn.softplus(
            tf.Variable(np.asarray(centers), name="centers", dtype=tf.float32)
        )
        pn_centers = _centers.numpy()
        # PhysNet implementation
        D = np.array([[1.0394776], [3.375541]], dtype=np.float32)
        D = tf.expand_dims(D, -1)  # necessary for proper broadcasting behaviour
        return tf.exp(-pn_widths * (tf.exp(-D) - pn_centers) ** 2)

    # rbf = calculate_reference()
    rbf = np.array(
        [
            [
                [
                    4.0640094e-19,
                    2.9076915e-16,
                    1.1954596e-13,
                    2.8243187e-11,
                    3.8343178e-09,
                    2.9912576e-07,
                    1.3409588e-05,
                    3.4543799e-04,
                    5.1135044e-03,
                    4.3497097e-02,
                    2.1261550e-01,
                    5.9720534e-01,
                    9.6393162e-01,
                    8.9405125e-01,
                    4.7651026e-01,
                    1.4594044e-01,
                    2.5684591e-02,
                    2.5975453e-03,
                    1.5095502e-04,
                    5.0411036e-06,
                ]
            ],
            [
                [
                    0.0000000e00,
                    1.8350491e-37,
                    2.2277273e-33,
                    1.5541043e-29,
                    6.2299409e-26,
                    1.4350924e-22,
                    1.8996544e-19,
                    1.4449790e-16,
                    6.3160042e-14,
                    1.5864159e-11,
                    2.2897197e-09,
                    1.8990863e-07,
                    9.0510239e-06,
                    2.4788288e-04,
                    3.9011124e-03,
                    3.5279620e-02,
                    1.8333825e-01,
                    5.4748958e-01,
                    9.3949002e-01,
                    9.2640764e-01,
                ]
            ],
        ],
        dtype=np.float32,
    )
    return rbf
